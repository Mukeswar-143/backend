package net.student.studentportal.controller;


import net.student.studentportal.entity.StudentsEntity;
import net.student.studentportal.repository.StudentsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/Students")
@CrossOrigin(origins = "http://localhost:3000")  // React frontend origin
public class StudentsController {

    @Autowired
    private StudentsRepository studentRepository;

    @GetMapping("/hello")
    public String hello() {
        return "hi to all";
    }

    @GetMapping("/details")
    public List<StudentsEntity> getAllStudents() {
        return studentRepository.findAll();
    }

    @PostMapping("/entry")
    public StudentsEntity createStudent(@RequestBody StudentsEntity student) {
        // ID will be auto-generated by DB, no need to set manually
        return studentRepository.save(student);
    }

    @GetMapping("/{id}")
    public StudentsEntity getStudentById(@PathVariable Long id) {
        return studentRepository.findById(id).orElse(null);
    }

    @PutMapping("/{id}")
    public ResponseEntity<StudentsEntity> updateStudentById(
            @PathVariable Long id,
            @RequestBody StudentsEntity updatedStudent) {

        Optional<StudentsEntity> optionalStudent = studentRepository.findById(id);

        if (optionalStudent.isPresent()) {
            StudentsEntity existingStudent = optionalStudent.get();

            existingStudent.setName(updatedStudent.getName());
            existingStudent.setSclass(updatedStudent.getSclass());
            existingStudent.setTelugu(updatedStudent.getTelugu());
            existingStudent.setHindi(updatedStudent.getHindi());
            existingStudent.setEnglish(updatedStudent.getEnglish());
            existingStudent.setMaths(updatedStudent.getMaths());
            existingStudent.setScience(updatedStudent.getScience());
            existingStudent.setSocial(updatedStudent.getSocial());

            StudentsEntity savedStudent = studentRepository.save(existingStudent);
            return ResponseEntity.ok(savedStudent);

        } else {
            // Return 404 Not Found if student does not exist
            return ResponseEntity.notFound().build();
        }
    }


    @DeleteMapping("/{id}")
    public String deleteStudentById(@PathVariable Long id) {
        studentRepository.deleteById(id);
        return "Student with ID " + id + " has been deleted.";
    }
}
